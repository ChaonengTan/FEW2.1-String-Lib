const sl = require('../src/index')
test('Sanity check', () => {
    expect(2+2).toBe(4)
})
test('capitalize', () => {
    expect(sl.capitalize('hello')).toBe('Hello')
    expect(sl.capitalize('WORLD')).toBe('WORLD')
    expect(sl.capitalize('')).toBe('')
    expect(sl.capitalize('foo bar')).toBe('Foo bar')
})
test('allCaps', () => {
    expect(sl.allCaps('hello')).toBe('HELLO')
    expect(sl.allCaps('WORLD')).toBe('WORLD')
    expect(sl.allCaps('')).toBe('')
    expect(sl.allCaps('foo bar')).toBe('FOO BAR')
    expect(sl.allCaps('What')).toBe('WHAT')
})
test('capitalizeWords', () => {
    expect(sl.capitalizeWords('hello')).toBe('Hello')
    expect(sl.capitalizeWords('WORLD')).toBe('WORLD')
    expect(sl.capitalizeWords('')).toBe('')
    expect(sl.capitalizeWords('foo bar')).toBe('Foo Bar')
})
test('removeExtraSpaces', () => {
    expect(sl.removeExtraSpaces('  test')).toBe('test')
    expect(sl.removeExtraSpaces('test  ')).toBe('test')
    expect(sl.removeExtraSpaces('')).toBe('')
    expect(sl.removeExtraSpaces('  test  test  ')).toBe('test test')
})
test('kebabCase', () => {
    expect(sl.kebabCase('h e l l o')).toBe('h-e-l-l-o')
    expect(sl.kebabCase('  h e l l o  ')).toBe('h-e-l-l-o')
    expect(sl.kebabCase('')).toBe('')
    expect(sl.kebabCase('foo bar')).toBe('foo-bar')
})
test('snakeCase', () => {
    expect(sl.snakeCase('h e l l o')).toBe('h_e_l_l_o')
    expect(sl.snakeCase('  h e l l o  ')).toBe('h_e_l_l_o')
    expect(sl.snakeCase('')).toBe('')
    expect(sl.snakeCase('foo bar')).toBe('foo_bar')
})
test('camelCase', () => {
    expect(sl.camelCase('h e l l o')).toBe('hELLO')
    expect(sl.camelCase('  h e l l o  ')).toBe('hELLO')
    expect(sl.camelCase('')).toBe('')
    expect(sl.camelCase('foo bar')).toBe('fooBar')
})
test('shift', () => {
    expect(sl.shift('hello')).toBe('elloh')
    expect(sl.shift('WORLD')).toBe('ORLDW')
    expect(sl.shift('')).toBe('')
    expect(sl.shift('foo bar')).toBe('oo barf')
})
test('makeHashTag', () => {
    expect(sl.makeHashTag('hello')).toEqual(['#Hello'])
    expect(sl.makeHashTag('WORLD')).toEqual(['#WORLD'])
    expect(sl.makeHashTag('')).toEqual([''])
    expect(sl.makeHashTag('foo bar')).toEqual(['#Foo', '#Bar'])
})
test('isEmpty', () => {
    expect(sl.isEmpty('hello')).toBe(false)
    expect(sl.isEmpty('foo bar')).toBe(false)
    expect(sl.isEmpty('')).toBe(true)
    expect(sl.isEmpty('\r')).toBe(true)
    expect(sl.isEmpty('\t')).toBe(true)
    expect(sl.isEmpty('\n')).toBe(true)
    expect(sl.isEmpty('\t\r\n')).toBe(true)
})